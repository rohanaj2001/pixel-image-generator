{"ast":null,"code":"var _jsxFileName = \"/home/kayamat/Desktop/projects/pixel-image-generator/src/PixelGrid.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./PixelGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PixelGrid(_ref) {\n  _s();\n  let {\n    rows,\n    cols\n  } = _ref;\n  const [pixelColors, setPixelColors] = useState(Array.from({\n    length: rows\n  }, () => Array.from({\n    length: cols\n  }, () => \"#fff\")));\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedPixelColors, setSelectedPixelColors] = useState([]);\n  const handleClick = (rowIndex, colIndex) => {\n    const newPixelColors = [...pixelColors];\n\n    // Update color of clicked pixel\n    newPixelColors[rowIndex][colIndex] = \"#2F2F2F\";\n\n    // Update state with new pixel colors\n    setPixelColors(newPixelColors);\n\n    // Add selected pixel color to state\n    setSelectedPixelColors([...selectedPixelColors, [rowIndex, colIndex, \"#2F2F2F\"]]);\n  };\n  const handleMouseDown = (rowIndex, colIndex) => {\n    setIsDragging(true);\n    handleClick(rowIndex, colIndex);\n  };\n  const handleMouseEnter = (rowIndex, colIndex) => {\n    if (isDragging) {\n      handleClick(rowIndex, colIndex);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n  const handleExport = () => {\n    const selectedPixelColors2D = [];\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n      for (let j = 0; j < cols; j++) {\n        const pixel = selectedPixelColors.find(_ref2 => {\n          let [rowIndex, colIndex] = _ref2;\n          return rowIndex === i && colIndex === j;\n        });\n        row.push(pixel ? pixel[2] : \"#fff\");\n      }\n      selectedPixelColors2D.push(row);\n    }\n    console.log(selectedPixelColors2D);\n  };\n  const handleReset = () => {\n    setPixelColors(Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => \"#fff\")));\n    setSelectedPixelColors([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pixel-grid\",\n    children: [pixelColors.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pixel-row\",\n      children: row.map((color, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pixel\",\n        style: {\n          backgroundColor: color\n        },\n        onMouseDown: () => handleMouseDown(rowIndex, colIndex),\n        onMouseEnter: () => handleMouseEnter(rowIndex, colIndex),\n        onMouseUp: handleMouseUp\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"export-button\",\n        onClick: handleExport,\n        children: \"Export\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(PixelGrid, \"mSfLrbkv6EiwbtKmDiinBDXVcKQ=\");\n_c = PixelGrid;\nexport default PixelGrid;\nvar _c;\n$RefreshReg$(_c, \"PixelGrid\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","PixelGrid","_ref","_s","rows","cols","pixelColors","setPixelColors","Array","from","length","isDragging","setIsDragging","selectedPixelColors","setSelectedPixelColors","handleClick","rowIndex","colIndex","newPixelColors","handleMouseDown","handleMouseEnter","handleMouseUp","handleExport","selectedPixelColors2D","i","row","j","pixel","find","_ref2","push","console","log","handleReset","className","children","map","color","style","backgroundColor","onMouseDown","onMouseEnter","onMouseUp","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/kayamat/Desktop/projects/pixel-image-generator/src/PixelGrid.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./PixelGrid.css\";\n\nfunction PixelGrid({ rows, cols }) {\n  const [pixelColors, setPixelColors] = useState(\n    Array.from({ length: rows }, () => Array.from({ length: cols }, () => \"#fff\"))\n  );\n\n  const [isDragging, setIsDragging] = useState(false);\n\n  const [selectedPixelColors, setSelectedPixelColors] = useState([]);\n\n  const handleClick = (rowIndex, colIndex) => {\n    const newPixelColors = [...pixelColors];\n\n    // Update color of clicked pixel\n    newPixelColors[rowIndex][colIndex] = \"#2F2F2F\";\n\n    // Update state with new pixel colors\n    setPixelColors(newPixelColors);\n\n    // Add selected pixel color to state\n    setSelectedPixelColors([\n      ...selectedPixelColors,\n      [rowIndex, colIndex, \"#2F2F2F\"],\n    ]);\n  };\n\n  const handleMouseDown = (rowIndex, colIndex) => {\n    setIsDragging(true);\n    handleClick(rowIndex, colIndex);\n  };\n\n  const handleMouseEnter = (rowIndex, colIndex) => {\n    if (isDragging) {\n      handleClick(rowIndex, colIndex);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  const handleExport = () => {\n    const selectedPixelColors2D = [];\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n      for (let j = 0; j < cols; j++) {\n        const pixel = selectedPixelColors.find(\n          ([rowIndex, colIndex]) => rowIndex === i && colIndex === j\n        );\n        row.push(pixel ? pixel[2] : \"#fff\");\n      }\n      selectedPixelColors2D.push(row);\n    }\n    console.log(selectedPixelColors2D);\n  };\n\n  const handleReset = () => {\n    setPixelColors(Array.from({ length: rows }, () => Array.from({ length: cols }, () => \"#fff\")));\n    setSelectedPixelColors([]);\n  };\n\n  return (\n    <div className=\"pixel-grid\">\n      {pixelColors.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"pixel-row\">\n          {row.map((color, colIndex) => (\n            <div\n              key={`${rowIndex}-${colIndex}`}\n              className=\"pixel\"\n              style={{ backgroundColor: color }}\n              onMouseDown={() => handleMouseDown(rowIndex, colIndex)}\n              onMouseEnter={() => handleMouseEnter(rowIndex, colIndex)}\n              onMouseUp={handleMouseUp}\n            />\n          ))}\n        </div>\n      ))}\n      <div className=\"button-container\">\n        <button className=\"reset-button\" onClick={handleReset}>\n          Reset\n        </button>\n        <button className=\"export-button\" onClick={handleExport}>\n          Export\n        </button>\n      </div>\n    </div>\n  );  \n}\n\nexport default PixelGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}